@using Microsoft.EntityFrameworkCore
@inject IDealScenarioService DealScenarioService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <!-- Toolbar -->
    <MudPaper Class="pa-4 mb-4">
        <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      OnClick="CreateScenario" 
                      Disabled="@_isBusy"
                      StartIcon="Icons.Material.Filled.Add">
                Create Scenario
            </MudButton>
            
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Success" 
                      OnClick="SaveAllocations" 
                      Disabled="@(_isBusy || _currentScenario == null)"
                      StartIcon="Icons.Material.Filled.Save">
                Save Allocations
            </MudButton>
            
            <MudButton Variant="Variant.Outlined" 
                      Color="Color.Warning" 
                      OnClick="Reset" 
                      Disabled="@(_isBusy || _currentScenario == null)"
                      StartIcon="Icons.Material.Filled.Refresh">
                Reset
            </MudButton>

            <MudSpacer />

            @if (_currentScenario != null)
            {
                <MudText Typo="Typo.body1">
                    Scenario ID: @_currentScenario.Id | Created: @_currentScenario.CreatedDate.ToString("MM/dd/yyyy HH:mm")
                </MudText>
            }

            @if (_isBusy)
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" />
            }
        </MudStack>
    </MudPaper>

    @if (_errorMessage != null)
    {
        <MudAlert Severity="Severity.Error" Class="mb-4">@_errorMessage</MudAlert>
    }

    @if (_currentScenario != null)
    {
        <!-- Drag and Drop Zones -->
        <MudDropContainer T="DealScenarioDetail" 
                         Items="@_allScenarioDetails" 
                         ItemsSelector="@((item, dropzone) => GetItemsForDropZone(item, dropzone))"
                         ItemDropped="@OnItemDropped"
                         Class="d-flex flex-row gap-4">
            <ChildContent>
                <!-- Unassigned Products Zone -->
                <MudPaper Class="pa-4 flex-grow-1" Style="min-height: 400px;">
                    <MudText Typo="Typo.h6" Class="mb-3">
                        Unassigned Products (@_unassignedDetails.Count)
                    </MudText>
                    <MudDropZone T="DealScenarioDetail" Identifier="unassigned" Class="drop-zone">
                        @if (!_unassignedDetails.Any())
                        {
                            <MudText Typo="Typo.body2" Color="Color.Tertiary" Class="pa-4 text-center">
                                No unassigned products
                            </MudText>
                        }
                    </MudDropZone>
                </MudPaper>

                <!-- Manufacturer Zones -->
                @foreach (var manufacturer in _manufacturers)
                {
                    var manufacturerDetails = _allScenarioDetails.Where(d => d.ManufacturerId == manufacturer.Id).ToList();
                    var totalValue = manufacturerDetails.Sum(d => d.Value ?? 0);
                    
                    <MudPaper Class="pa-4 flex-grow-1" Style="min-height: 400px;">
                        <MudText Typo="Typo.h6" Class="mb-1">
                            @manufacturer.ManufacturerName (@manufacturerDetails.Count)
                        </MudText>
                        <MudText Typo="Typo.subtitle2" Color="Color.Primary" Class="mb-3">
                            Total Value: @totalValue.ToString("C")
                        </MudText>
                        <MudDropZone T="DealScenarioDetail" 
                                    Identifier="@manufacturer.Id.ToString()" 
                                    Class="drop-zone">
                            @if (!manufacturerDetails.Any())
                            {
                                <MudText Typo="Typo.body2" Color="Color.Tertiary" Class="pa-4 text-center">
                                    Drop products here
                                </MudText>
                            }
                        </MudDropZone>
                    </MudPaper>
                }
            </ChildContent>
            
            <ItemRenderer>
                <MudCard Class="ma-2 draggable-item" Style="cursor: move;">
                    <MudCardContent Class="pa-3">
                        <MudText Typo="Typo.body1"><strong>@context.Product?.MoleculeName</strong></MudText>
                        <MudText Typo="Typo.body2" Color="Color.Tertiary">
                            @context.Product?.Strength @context.Product?.Form
                        </MudText>
                        <MudText Typo="Typo.body2" Color="Color.Primary">
                            Value: @context.Value?.ToString("C")
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </ItemRenderer>
        </MudDropContainer>
    }
    else
    {
        <MudPaper Class="pa-8 text-center">
            <MudText Typo="Typo.h6" Color="Color.Tertiary">
                No scenario created. Click "Create Scenario" to begin.
            </MudText>
        </MudPaper>
    }
</MudContainer>

<style>
    .drop-zone {
        min-height: 300px;
        border: 2px dashed #e0e0e0;
        border-radius: 8px;
        transition: border-color 0.3s ease;
    }
    
    .drop-zone.mud-drop-zone-drag-over {
        border-color: var(--mud-palette-primary);
        background-color: var(--mud-palette-primary-lighten);
    }
    
    .draggable-item {
        transition: transform 0.2s ease;
    }
    
    .draggable-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
</style>

@code {
    private DealScenario? _currentScenario;
    private List<DealScenarioDetail> _allScenarioDetails = new();
    private List<DealScenarioDetail> _unassignedDetails = new();
    private List<Manufacturer> _manufacturers = new();
    private bool _isBusy = false;
    private bool _isSaving = false;
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _manufacturers = await DealScenarioService.GetManufacturersAsync();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to load manufacturers: {ex.Message}";
            Snackbar.Add(_errorMessage, Severity.Error);
        }
    }

    private async Task CreateScenario()
    {
        if (_isBusy) return;
        
        _isBusy = true;
        _errorMessage = null;
        
        try
        {
            _currentScenario = await DealScenarioService.CreateScenarioAsync(new CreateDealScenarioRequest());
            await LoadScenarioDetails();
            Snackbar.Add("Scenario created successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to create scenario: {ex.Message}";
            Snackbar.Add(_errorMessage, Severity.Error);
        }
        finally
        {
            _isBusy = false;
        }
    }

    private async Task LoadScenarioDetails()
    {
        if (_currentScenario == null) return;
        
        try
        {
            var scenario = await DealScenarioService.GetScenarioWithDetailsAsync(_currentScenario.Id);
            _allScenarioDetails = scenario.DealScenarioDetails.ToList();
            UpdateUnassignedDetails();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to load scenario details: {ex.Message}";
            Snackbar.Add(_errorMessage, Severity.Error);
        }
    }

    private void UpdateUnassignedDetails()
    {
        _unassignedDetails = _allScenarioDetails.Where(d => !d.ManufacturerId.HasValue).ToList();
    }

    private async Task SaveAllocations()
    {
        if (_currentScenario == null || _isSaving) return;
        
        _isSaving = true;
        _errorMessage = null;
        
        try
        {
            var allocations = _allScenarioDetails.Select(d => new AllocationUpdate(d.Id, d.ManufacturerId)).ToList();
            await DealScenarioService.SaveAllocationsAsync(_currentScenario.Id, allocations);
            Snackbar.Add("Allocations saved successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to save allocations: {ex.Message}";
            Snackbar.Add(_errorMessage, Severity.Error);
        }
        finally
        {
            _isSaving = false;
        }
    }

    private Task Reset()
    {
        if (_currentScenario == null || _isBusy) return Task.CompletedTask;
        
        _isBusy = true;
        _errorMessage = null;
        
        try
        {
            // Reset all items to unassigned
            foreach (var detail in _allScenarioDetails)
            {
                detail.ManufacturerId = null;
                detail.Manufacturer = null;
            }
            UpdateUnassignedDetails();
            Snackbar.Add("Allocations reset successfully!", Severity.Info);
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to reset: {ex.Message}";
            Snackbar.Add(_errorMessage, Severity.Error);
        }
        finally
        {
            _isBusy = false;
        }
        
        return Task.CompletedTask;
    }

    private bool GetItemsForDropZone(DealScenarioDetail item, string dropZone)
    {
        if (dropZone == "unassigned")
        {
            return !item.ManufacturerId.HasValue;
        }
        
        if (int.TryParse(dropZone, out var manufacturerId))
        {
            return item.ManufacturerId == manufacturerId;
        }
        
        return false;
    }

    private void OnItemDropped(MudItemDropInfo<DealScenarioDetail> dropInfo)
    {
        if (dropInfo.DropzoneIdentifier == "unassigned")
        {
            dropInfo.Item.ManufacturerId = null;
            dropInfo.Item.Manufacturer = null;
        }
        else if (int.TryParse(dropInfo.DropzoneIdentifier, out var manufacturerId))
        {
            dropInfo.Item.ManufacturerId = manufacturerId;
            dropInfo.Item.Manufacturer = _manufacturers.FirstOrDefault(m => m.Id == manufacturerId);
        }
        
        UpdateUnassignedDetails();
        StateHasChanged();
    }
}
